services:
  flask:
    build: . # this will build the app from the Dockerfile in the local folder
    ports:
      - 8080:8080
    networks:
      - new_network
    depends_on:
      redis:
        condition: service_healthy # will wait for Redis to be ready
      postgres:
        condition: service_healthy # will wait for PostgreSQL to be ready

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - new_network
    healthcheck:
      test: ["CMD" , "redis-cli" , "ping"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  nginx:
    image: nginx:latest
    networks:
      - new_network
    ports:
      - "80:80"
    volumes:
     - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
        flask:
          condition: service_started

  postgres:
    image: postgres:latest
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - my-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - new_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -t 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

volumes:
   my-db-data:

networks:
  new_network: